# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

report_folder_ios = "sonar-reports/iOS"

platform :ios do
  desc "All iOS lanes"
  lane :all_checks do
    sh("mkdir -p ../#{report_folder_ios}")
    lint
    run_all_test_ios
    create_sonar_reports(scheme: "Accounts (iOS)")
  end

  desc "Run all test for iOS modules"
  lane :run_all_test_ios do
    run_tests(
      project: "Accounts.xcodeproj",
      scheme: "Accounts (iOS)",
      sdk: "iphonesimulator16.4",
      device: "iPhone 14 (16.4)",
      output_directory: report_folder_ios,
      result_bundle: true,
      clean: true,
    )
  end

  # SonarQube
  desc "Create SonarQube test and coverage reports"
  lane :create_sonar_reports do |options|
    folders = [
      "*/Package.swift",
      "DerivedData/*",
      "*/Tests/*",
      "**/*Test.swift",
      "**/*Tests.swift",
      "**/*Strings.swift",
      "**/*AccountsTestsMac.swift"
    ]

    slather(
      sonarqube_xml: true,
      cobertura_xml: false,
      use_bundle_exec: true,
      ignore: folders,
      output_directory: report_folder_ios,
      scheme: options[:scheme],
      proj: "Accounts.xcodeproj"
    )

    create_sonar_test_execution_reports(scheme: options[:scheme])
  end

  desc "Create test execution reports (SonarQube)"
  lane :create_sonar_test_execution_reports do |options|
    export_junit_report(scheme: options[:scheme])
    output_directory = report_folder_ios
    forsis(
       junit_report_file: "#{output_directory}/#{options[:scheme]}.xml",
       sonar_report_directory: "#{output_directory}"
   )
  end

  private_lane :export_junit_report do |options|
    output_directory = report_folder_ios
    xcresult_path = "#{output_directory}/#{options[:scheme]}.xcresult"
    trainer(
      path: xcresult_path,
      output_directory: output_directory,
      fail_build: false
    )
  end

  # Lint

  desc "Lint all files"
  lane :lint do
    swiftlint(
      output_file: "sonar-reports/Accounts-macOS-swiftlint.txt",
      ignore_exit_status: true
    )
  end

  desc "Push a new beta build to TestFlight"
  lane :beta do
    build_app(scheme: "Accounts (iOS)")
    upload_to_testflight
  end
end

platform :mac do

  desc "All macOS lanes"
  lane :all_checks do
    sh("mkdir -p ../sonar-reports/macOS")
    lint
    run_all_test_macos
    coverage_macos
  end

  desc "Run all test for macOS modules"
  lane :run_all_test_macos do
    run_tests(
      project: "Accounts.xcodeproj",
      scheme: "Accounts (macOS)",
      destination: "'platform=macOS, arch=x86_64'",
      output_directory: "sonar-reports/macOS",
      clean: true,
    )
  end

  desc "Calculate the code coverage for macOS packages"
  lane :coverage_macos do
    slather(
      scheme: "Accounts (macOS)",
      proj: "Accounts.xcodeproj",
      configuration: "Debug",
      output_directory: "sonar-reports/macOS",
      cobertura_xml: "true",
      sonarqube_xml: true,
      cobertura_xml: false,
      ignore: [
        "*/Package.swift",
        "DerivedData/*",
        "*/Tests/*"
      ],
    )
  end

  desc "Lint all files"
  lane :lint do
    swiftlint(
      output_file: "sonar-reports/Accounts-macOS-swiftlint.txt",
      ignore_exit_status: true
    )
  end
end

